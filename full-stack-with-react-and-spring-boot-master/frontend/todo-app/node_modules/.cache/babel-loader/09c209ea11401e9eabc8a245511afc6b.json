{"ast":null,"code":"import _classCallCheck from \"/in28Minutes/git/full-stack-with-react-and-spring-boot/frontend/todo-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/in28Minutes/git/full-stack-with-react-and-spring-boot/frontend/todo-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/in28Minutes/git/full-stack-with-react-and-spring-boot/frontend/todo-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/in28Minutes/git/full-stack-with-react-and-spring-boot/frontend/todo-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/in28Minutes/git/full-stack-with-react-and-spring-boot/frontend/todo-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/in28Minutes/git/full-stack-with-react-and-spring-boot/frontend/todo-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/in28Minutes/git/full-stack-with-react-and-spring-boot/frontend/todo-app/src/components/counter/Counter.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Counter.css';\n\nvar Counter =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Counter, _Component);\n\n  function Counter() {\n    var _this;\n\n    _classCallCheck(this, Counter);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Counter).call(this)); //Error 1\n\n    _this.state = {\n      counter: 0\n    };\n    _this.increment = _this.increment.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Counter, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"counter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, React.createElement(CounterButton, {\n        by: 1,\n        incrementMethod: this.increment,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }), React.createElement(CounterButton, {\n        by: 5,\n        incrementMethod: this.increment,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }), React.createElement(CounterButton, {\n        by: 10,\n        incrementMethod: this.increment,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"count\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, this.state.counter));\n    }\n  }, {\n    key: \"increment\",\n    value: function increment(by) {\n      //console.log(`increment from child - ${by}`)\n      this.setState(function (prevState) {\n        return {\n          counter: prevState.counter + by\n        };\n      });\n    }\n  }]);\n\n  return Counter;\n}(Component);\n\nvar CounterButton =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(CounterButton, _Component2);\n\n  //Define the initial state in a constructor\n  //state => counter 0\n  function CounterButton() {\n    var _this2;\n\n    _classCallCheck(this, CounterButton);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(CounterButton).call(this)); //Error 1\n\n    _this2.state = {\n      counter: 0\n    };\n    _this2.increment = _this2.increment.bind(_assertThisInitialized(_assertThisInitialized(_this2)));\n    return _this2;\n  }\n\n  _createClass(CounterButton, [{\n    key: \"render\",\n    value: function render() {\n      //render = () =>  {\n      //const style = {fontSize : \"50px\", padding : \"15px 30px\"};\n      return React.createElement(\"div\", {\n        className: \"counter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.increment,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"+\", this.props.by));\n    }\n  }, {\n    key: \"increment\",\n    value: function increment() {\n      //Update state - counter++\n      //console.log('increment');\n      //this.state.counter++; //Bad Practice\n      this.setState({\n        counter: this.state.counter + this.props.by\n      });\n      this.props.incrementMethod(this.props.by);\n    }\n  }]);\n\n  return CounterButton;\n}(Component);\n\nCounterButton.defaultProps = {\n  by: 1\n};\nCounterButton.propTypes = {\n  by: PropTypes.number\n};\nexport default Counter;","map":{"version":3,"sources":["/in28Minutes/git/full-stack-with-react-and-spring-boot/frontend/todo-app/src/components/counter/Counter.jsx"],"names":["React","Component","PropTypes","Counter","state","counter","increment","bind","by","setState","prevState","CounterButton","props","incrementMethod","defaultProps","propTypes","number"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,eAAP;;IAEMC,O;;;;;AAEF,qBAAc;AAAA;;AAAA;;AAEV,kFAFU,CAED;;AAET,UAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAG;AADD,KAAb;AAIA,UAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeC,IAAf,uDAAjB;AARU;AASb;;;;6BAEQ;AACL,aACE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,oBAAC,aAAD;AAAe,QAAA,EAAE,EAAE,CAAnB;AAAsB,QAAA,eAAe,EAAE,KAAKD,SAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADH,EAEG,oBAAC,aAAD;AAAe,QAAA,EAAE,EAAE,CAAnB;AAAsB,QAAA,eAAe,EAAE,KAAKA,SAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFH,EAGG,oBAAC,aAAD;AAAe,QAAA,EAAE,EAAE,EAAnB;AAAuB,QAAA,eAAe,EAAE,KAAKA,SAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHH,EAIG;AAAM,QAAA,SAAS,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyB,KAAKF,KAAL,CAAWC,OAApC,CAJH,CADF;AAQH;;;8BAESG,E,EAAI;AACV;AACA,WAAKC,QAAL,CACI,UAACC,SAAD,EAAe;AACd,eAAO;AAACL,UAAAA,OAAO,EAAEK,SAAS,CAACL,OAAV,GAAoBG;AAA9B,SAAP;AACA,OAHL;AAKH;;;;EA/BiBP,S;;IAkChBU,a;;;;;AACJ;AACA;AACA,2BAAc;AAAA;;AAAA;;AACV,yFADU,CACD;;AAET,WAAKP,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAG;AADD,KAAb;AAIA,WAAKC,SAAL,GAAiB,OAAKA,SAAL,CAAeC,IAAf,wDAAjB;AAPU;AAQb;;;;6BAES;AACV;AACE;AACA,aACI;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAQ,QAAA,OAAO,EAAE,KAAKD,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAoC,KAAKM,KAAL,CAAWJ,EAA/C,CADJ,CADJ;AAOD;;;gCAEW;AAAE;AACZ;AACA;AACA,WAAKC,QAAL,CAAc;AACVJ,QAAAA,OAAO,EAAE,KAAKD,KAAL,CAAWC,OAAX,GAAqB,KAAKO,KAAL,CAAWJ;AAD/B,OAAd;AAIA,WAAKI,KAAL,CAAWC,eAAX,CAA2B,KAAKD,KAAL,CAAWJ,EAAtC;AACD;;;;EAjCyBP,S;;AAqC5BU,aAAa,CAACG,YAAd,GAA6B;AACzBN,EAAAA,EAAE,EAAG;AADoB,CAA7B;AAIAG,aAAa,CAACI,SAAd,GAA0B;AACtBP,EAAAA,EAAE,EAAGN,SAAS,CAACc;AADO,CAA1B;AAIA,eAAeb,OAAf","sourcesContent":["import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport './Counter.css'\n\nclass Counter extends Component {\n\n    constructor() {\n\n        super(); //Error 1\n  \n        this.state = {\n            counter : 0\n        }\n\n        this.increment = this.increment.bind(this);\n    }\n  \n    render() {\n        return (\n          <div className=\"counter\">\n             <CounterButton by={1} incrementMethod={this.increment}/>\n             <CounterButton by={5} incrementMethod={this.increment}/>\n             <CounterButton by={10} incrementMethod={this.increment}/>\n             <span className=\"count\">{this.state.counter}</span> \n          </div>\n        );\n    }    \n\n    increment(by) { \n        //console.log(`increment from child - ${by}`)\n        this.setState(\n            (prevState) => {\n             return {counter: prevState.counter + by}\n            }\n        );\n    }\n}\n\nclass CounterButton extends Component {\n  //Define the initial state in a constructor\n  //state => counter 0\n  constructor() {\n      super(); //Error 1\n\n      this.state = {\n          counter : 0\n      }\n\n      this.increment = this.increment.bind(this);\n  }\n  \n  render()  {\n  //render = () =>  {\n    //const style = {fontSize : \"50px\", padding : \"15px 30px\"};\n    return (\n        <div className=\"counter\">\n            <button onClick={this.increment} >+{this.props.by}</button>\n            {/*<span className=\"count\" \n            >{this.state.counter}</span>*/}\n        </div>\n    )\n  }\n  \n  increment() { //Update state - counter++\n    //console.log('increment');\n    //this.state.counter++; //Bad Practice\n    this.setState({\n        counter: this.state.counter + this.props.by\n    });\n    \n    this.props.incrementMethod(this.props.by);\n  }\n\n}\n\nCounterButton.defaultProps = {\n    by : 1\n}\n\nCounterButton.propTypes = {\n    by : PropTypes.number\n}\n\nexport default Counter"]},"metadata":{},"sourceType":"module"}